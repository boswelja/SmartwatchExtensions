import java.util.concurrent.TimeUnit

ext.buildConfig = [
        versionCode: generateVersionCode()
]

ext {
    kotlin_version = "1.4-M3"
}

static def generateVersionCode() {
    def versionBuildKey = 'version.build_number'
    def versionPropFile = new File('version.properties')
    def lastModified = versionPropFile.lastModified()
    def versionBuild
    def versionProps = new Properties()
    if (!versionPropFile.canRead()) {
        if (versionPropFile.createNewFile()) {
            versionProps.load(new FileInputStream(versionPropFile))
        }
    } else {
        versionProps.load(new FileInputStream(versionPropFile))
    }

    if (versionProps.containsKey(versionBuildKey) && !isOldData(lastModified)) {
        versionBuild = versionProps.get(versionBuildKey).toInteger()
    } else {
        versionBuild = 0
    }
    if (versionBuild < 99) {
        if (shouldIncrementVersion(lastModified)) {
            versionProps.put(versionBuildKey, (versionBuild + 1).toString())
            versionProps.store(new FileWriter(versionPropFile), null)
        }
    } else {
        throw new Exception("Build limit reached")
    }
    def buildNumber = String.format("%02d", versionBuild)

    def dateSection = new Date().format('yyyyMMdd').toString()
    return dateSection.concat(buildNumber).toInteger()
}

static def shouldIncrementVersion(Long lastEditedTimestamp) {
    Calendar lastBuildDate = Calendar.getInstance()
    lastBuildDate.setTimeInMillis(lastEditedTimestamp)

    Calendar currentDate = Calendar.getInstance()
    currentDate.setTimeInMillis(System.currentTimeMillis())

    Long minimumDiff = TimeUnit.SECONDS.toMillis(45)
    return (currentDate.timeInMillis - lastBuildDate.timeInMillis) >= minimumDiff
}

static def isOldData(Long timestamp) {
    Calendar lastBuildDate = Calendar.getInstance()
    lastBuildDate.setTimeInMillis(timestamp)
    lastBuildDate.set(Calendar.HOUR_OF_DAY, 0)
    lastBuildDate.set(Calendar.MINUTE, 0)
    lastBuildDate.set(Calendar.SECOND, 0)
    lastBuildDate.set(Calendar.MILLISECOND, 0)

    Calendar currentDate = Calendar.getInstance()
    currentDate.setTimeInMillis(System.currentTimeMillis())
    currentDate.set(Calendar.HOUR_OF_DAY, 0)
    currentDate.set(Calendar.MINUTE, 0)
    currentDate.set(Calendar.SECOND, 0)
    currentDate.set(Calendar.MILLISECOND, 0)
    return lastBuildDate < currentDate
}
